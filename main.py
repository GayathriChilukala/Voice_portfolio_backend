from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
import httpx
import os
from typing import Optional

app = FastAPI(title="DeepSeek AI API", description="Ask questions and get AI responses")

class QuestionRequest(BaseModel):
    question: str

class QuestionResponse(BaseModel):
    question: str
    answer: str
    model: str

@app.get("/")
async def root():
    return {
        "message": "DeepSeek AI API is running!",
        "endpoints": {
            "POST /ask": "Ask a question to the AI",
            "GET /": "This endpoint"
        }
    }

@app.post("/ask", response_model=QuestionResponse)
async def ask_question(request: QuestionRequest):
    try:
        token = os.getenv("GITHUB_TOKEN")
        if not token:
            raise HTTPException(
                status_code=500, 
                detail="GITHUB_TOKEN environment variable is not set"
            )
        
        endpoint = "https://models.github.ai/inference"
        model_name = "deepseek/DeepSeek-R1"
        
        # Prepare the request payload
        payload = {
            "messages": [
                {"role": "user", "content": request.question}
            ],
            "max_tokens": 1000,
            "model": model_name
        }
        
        # Make the request to GitHub Models API
        async with httpx.AsyncClient() as client:
            response = await client.post(
                f"{endpoint}/chat/completions",
                headers={
                    "Authorization": f"Bearer {token}",
                    "Content-Type": "application/json"
                },
                json=payload,
                timeout=30.0
            )
            
            if response.status_code != 200:
                error_detail = response.text
                raise HTTPException(
                    status_code=response.status_code,
                    detail=f"API request failed: {error_detail}"
                )
            
            result = response.json()
            
            if "choices" not in result or len(result["choices"]) == 0:
                raise HTTPException(
                    status_code=500,
                    detail="No response generated by the model"
                )
            
            answer = result["choices"][0]["message"]["content"]
            
            return QuestionResponse(
                question=request.question,
                answer=answer,
                model=model_name
            )
            
    except httpx.TimeoutException:
        raise HTTPException(
            status_code=408,
            detail="Request timeout - the AI model took too long to respond"
        )
    except Exception as e:
        raise HTTPException(
            status_code=500,
            detail=f"An error occurred: {str(e)}"
        )

@app.get("/health")
async def health_check():
    return {"status": "healthy"}

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)